# i wanna free code without fuking pay
name: PNG to SVG Converter

on:
  workflow_dispatch:
    inputs:
      png_url:
        description: 'Direct URL of PNG image to convert'
        required: true
        type: string
      threshold:
        description: 'Threshold sensitivity (0-255, lower=more details)'
        required: false
        default: 'auto'
        type: string
      scale:
        description: 'Output scale (1-10)'
        required: false
        default: '5'
        type: string

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            potrace \
            build-essential \
            python3-dev \
            libagg-dev \
            libpotrace-dev
          pip install --upgrade pip setuptools wheel

      - name: üì• Download PNG
        run: |
          curl -L "${{ github.event.inputs.png_url }}" -o /tmp/input.png
          echo "Image downloaded to /tmp/input.png"

      - name: üñºÔ∏è Convert to SVG Path
        run: |
          python3 <<EOF
          import os
          from PIL import Image
          import numpy as np
          from skimage import color, filters
          import io
          import math
          import subprocess

          # Configuration
          MAX_SIZE = 300
          SCALE = float("${{ github.event.inputs.scale }}")
          THRESH = "${{ github.event.inputs.threshold }}"

          # Load image
          with open('/tmp/input.png', 'rb') as f:
              img = Image.open(io.BytesIO(f.read())).convert('RGBA')
          
          # Resize while maintaining aspect ratio
          ratio = min(MAX_SIZE/img.width, MAX_SIZE/img.height)
          new_size = (int(img.width*ratio), int(img.height*ratio))
          img = img.resize(new_size, Image.LANCZOS)

          # Convert to grayscale and threshold
          img_gray = color.rgb2gray(np.array(img))
          
          if THRESH.lower() == 'auto':
              thresh = filters.threshold_otsu(img_gray)
          else:
              thresh = float(THRESH)/255.0
          
          bw = (img_gray > thresh).astype(np.uint8) * 255
          Image.fromarray(bw).save('/tmp/bw.png')

          # Use potrace CLI directly
          subprocess.run([
              'potrace',
              '/tmp/bw.png',
              '-b', 'svg',
              '-o', '/tmp/output.svg',
              '--scale', str(SCALE),
              '--tight',
              '--opttolerance', '0.2'
          ])

          # Read and print results
          with open('/tmp/output.svg', 'r') as f:
              svg_content = f.read()
              path_start = svg_content.find('d="') + 3
              path_end = svg_content.find('"', path_start)
              path_data = svg_content[path_start:path_end]

              print("\n" + "="*50)
              print("SVG PATH DATA:")
              print(f'<path d="{path_data}" fill="black"/>')
              
              print("\nFULL SVG TEMPLATE:")
              print(f'''<svg xmlns="http://www.w3.org/2000/svg" 
              width="{new_size[0] * SCALE}" 
              height="{new_size[1] * SCALE}" 
              viewBox="0 0 {new_size[0] * SCALE} {new_size[1] * SCALE}">
              <path d="{path_data}" fill="black"/>
              </svg>''')
              print("="*50 + "\n")
          EOF

      - name: üéâ Complete
        run: echo "Conversion finished! Check logs above for SVG output."
